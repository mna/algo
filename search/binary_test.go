package search

import (
	"fmt"
	"testing"
)

func TestBinary(t *testing.T) {
	cases := []struct {
		in     []int
		search int
		out    int
	}{
		{nil, 1, -1},
		{[]int{1}, 1, 0},
		{[]int{1}, -1, -1},
		{[]int{1}, 2, -1},
		{[]int{1, 2}, 0, -1},
		{[]int{1, 2}, 1, 0},
		{[]int{1, 2}, 2, 1},
		{[]int{1, 2}, 3, -1},
		{[]int{1, 2, 3}, 0, -1},
		{[]int{1, 2, 3}, 1, 0},
		{[]int{1, 2, 3}, 2, 1},
		{[]int{1, 2, 3}, 3, 2},
		{[]int{1, 2, 3}, 4, -1},
		{[]int{1, 2, 3, 4}, 0, -1},
		{[]int{1, 2, 3, 4}, 1, 0},
		{[]int{1, 2, 3, 4}, 2, 1},
		{[]int{1, 2, 3, 4}, 3, 2},
		{[]int{1, 2, 3, 4}, 4, 3},
		{[]int{1, 2, 3, 4}, 5, -1},
		{[]int{1, 2, 3, 4, 5}, 0, -1},
		{[]int{1, 2, 3, 4, 5}, 1, 0},
		{[]int{1, 2, 3, 4, 5}, 2, 1},
		{[]int{1, 2, 3, 4, 5}, 3, 2},
		{[]int{1, 2, 3, 4, 5}, 4, 3},
		{[]int{1, 2, 3, 4, 5}, 5, 4},
		{[]int{1, 2, 3, 4, 5}, 6, -1},
		{[]int{1, 2, 3, 4, 5, 6}, 0, -1},
		{[]int{1, 2, 3, 4, 5, 6}, 1, 0},
		{[]int{1, 2, 3, 4, 5, 6}, 2, 1},
		{[]int{1, 2, 3, 4, 5, 6}, 3, 2},
		{[]int{1, 2, 3, 4, 5, 6}, 4, 3},
		{[]int{1, 2, 3, 4, 5, 6}, 5, 4},
		{[]int{1, 2, 3, 4, 5, 6}, 6, 5},
		{[]int{1, 2, 3, 4, 5, 6}, 7, -1},
		{[]int{1, 2, 3, 4, 5, 6, 7}, 0, -1},
		{[]int{1, 2, 3, 4, 5, 6, 7}, 1, 0},
		{[]int{1, 2, 3, 4, 5, 6, 7}, 2, 1},
		{[]int{1, 2, 3, 4, 5, 6, 7}, 3, 2},
		{[]int{1, 2, 3, 4, 5, 6, 7}, 4, 3},
		{[]int{1, 2, 3, 4, 5, 6, 7}, 5, 4},
		{[]int{1, 2, 3, 4, 5, 6, 7}, 6, 5},
		{[]int{1, 2, 3, 4, 5, 6, 7}, 7, 6},
		{[]int{1, 2, 3, 4, 5, 6, 7}, 8, -1},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8}, 0, -1},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8}, 1, 0},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8}, 2, 1},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8}, 3, 2},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8}, 4, 3},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8}, 5, 4},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8}, 6, 5},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8}, 7, 6},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8}, 8, 7},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8}, 9, -1},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 0, -1},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 1, 0},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 2, 1},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 3, 2},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 4, 3},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 5, 4},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 6, 5},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 7, 6},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 8, 7},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 9, 8},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 10, -1},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 0, -1},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 1, 0},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2, 1},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3, 2},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 4, 3},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5, 4},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 6, 5},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 7, 6},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 8, 7},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 9, 8},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 10, 9},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 11, -1},
		{[]int{10, 20, 30, 40, 50, 60, 70, 80, 90, 100}, 11, -1},
		{[]int{10, 20, 30, 40, 50, 60, 70, 80, 90, 100}, 82, -1},
		{[]int{10, 20, 30, 40, 50, 60, 70, 80, 90, 100}, 99, -1},
		{[]int{10, 20, 30, 40, 50, 60, 70, 80, 90, 100}, 100, 9},
		{[]int{10, 20, 30, 40, 50, 60, 70, 80, 90, 100}, 10, 0},
		{[]int{10, 20, 30, 40, 50, 60, 70, 80, 90, 100}, 1, -1},
	}

	for _, c := range cases {
		t.Run(fmt.Sprintf("%d in %v", c.search, c.in), func(t *testing.T) {
			got := Binary(c.in, c.search)
			if got != c.out {
				t.Fatalf("want %d, got %d", c.out, got)
			}
		})
	}
}

func TestBinaryFunc(t *testing.T) {
	cmp := func(v1, v2 int) int {
		switch {
		case v1 > v2:
			return 1
		case v1 < v2:
			return -1
		default:
			return 0
		}
	}

	cases := []struct {
		in     []int
		search int
		out    int
	}{
		{nil, 1, -1},
		{[]int{1}, 1, 0},
		{[]int{1}, -1, -1},
		{[]int{1}, 2, -1},
		{[]int{1, 2}, 0, -1},
		{[]int{1, 2}, 1, 0},
		{[]int{1, 2}, 2, 1},
		{[]int{1, 2}, 3, -1},
		{[]int{1, 2, 3}, 0, -1},
		{[]int{1, 2, 3}, 1, 0},
		{[]int{1, 2, 3}, 2, 1},
		{[]int{1, 2, 3}, 3, 2},
		{[]int{1, 2, 3}, 4, -1},
		{[]int{1, 2, 3, 4}, 0, -1},
		{[]int{1, 2, 3, 4}, 1, 0},
		{[]int{1, 2, 3, 4}, 2, 1},
		{[]int{1, 2, 3, 4}, 3, 2},
		{[]int{1, 2, 3, 4}, 4, 3},
		{[]int{1, 2, 3, 4}, 5, -1},
		{[]int{1, 2, 3, 4, 5}, 0, -1},
		{[]int{1, 2, 3, 4, 5}, 1, 0},
		{[]int{1, 2, 3, 4, 5}, 2, 1},
		{[]int{1, 2, 3, 4, 5}, 3, 2},
		{[]int{1, 2, 3, 4, 5}, 4, 3},
		{[]int{1, 2, 3, 4, 5}, 5, 4},
		{[]int{1, 2, 3, 4, 5}, 6, -1},
		{[]int{1, 2, 3, 4, 5, 6}, 0, -1},
		{[]int{1, 2, 3, 4, 5, 6}, 1, 0},
		{[]int{1, 2, 3, 4, 5, 6}, 2, 1},
		{[]int{1, 2, 3, 4, 5, 6}, 3, 2},
		{[]int{1, 2, 3, 4, 5, 6}, 4, 3},
		{[]int{1, 2, 3, 4, 5, 6}, 5, 4},
		{[]int{1, 2, 3, 4, 5, 6}, 6, 5},
		{[]int{1, 2, 3, 4, 5, 6}, 7, -1},
		{[]int{1, 2, 3, 4, 5, 6, 7}, 0, -1},
		{[]int{1, 2, 3, 4, 5, 6, 7}, 1, 0},
		{[]int{1, 2, 3, 4, 5, 6, 7}, 2, 1},
		{[]int{1, 2, 3, 4, 5, 6, 7}, 3, 2},
		{[]int{1, 2, 3, 4, 5, 6, 7}, 4, 3},
		{[]int{1, 2, 3, 4, 5, 6, 7}, 5, 4},
		{[]int{1, 2, 3, 4, 5, 6, 7}, 6, 5},
		{[]int{1, 2, 3, 4, 5, 6, 7}, 7, 6},
		{[]int{1, 2, 3, 4, 5, 6, 7}, 8, -1},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8}, 0, -1},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8}, 1, 0},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8}, 2, 1},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8}, 3, 2},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8}, 4, 3},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8}, 5, 4},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8}, 6, 5},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8}, 7, 6},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8}, 8, 7},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8}, 9, -1},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 0, -1},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 1, 0},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 2, 1},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 3, 2},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 4, 3},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 5, 4},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 6, 5},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 7, 6},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 8, 7},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 9, 8},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9}, 10, -1},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 0, -1},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 1, 0},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2, 1},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3, 2},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 4, 3},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5, 4},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 6, 5},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 7, 6},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 8, 7},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 9, 8},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 10, 9},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 11, -1},
		{[]int{10, 20, 30, 40, 50, 60, 70, 80, 90, 100}, 11, -1},
		{[]int{10, 20, 30, 40, 50, 60, 70, 80, 90, 100}, 82, -1},
		{[]int{10, 20, 30, 40, 50, 60, 70, 80, 90, 100}, 99, -1},
		{[]int{10, 20, 30, 40, 50, 60, 70, 80, 90, 100}, 100, 9},
		{[]int{10, 20, 30, 40, 50, 60, 70, 80, 90, 100}, 10, 0},
		{[]int{10, 20, 30, 40, 50, 60, 70, 80, 90, 100}, 1, -1},
	}

	for _, c := range cases {
		t.Run(fmt.Sprintf("%d in %v", c.search, c.in), func(t *testing.T) {
			got := BinaryFunc(c.in, c.search, cmp)
			if got != c.out {
				t.Fatalf("want %d, got %d", c.out, got)
			}
		})
	}
}
